use chess::{Board, Color, Piece, Square};

const PAWN_TABLE: [f32; 64] = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,50.0,50.0,50.0,50.0,50.0,50.0,50.0,50.0,10.0,10.0,20.0,30.0,30.0,20.0,10.0,10.0,5.0,5.0,10.0,27.0,27.0,10.0,5.0,5.0,0.0,0.0,0.0,25.0,25.0,0.0,0.0,0.0,5.0,-5.0,-10.0,0.0,0.0,-10.0,-5.0,5.0,5.0,10.0,10.0,-25.0,-25.0,10.0,10.0,5.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0];
const KNIGHTS_TABLE: [f32; 64] = [-50.0,-40.0,-30.0,-30.0,-30.0,-30.0,-40.0,-50.0,-40.0,-20.0,0.0,0.0,0.0,0.0,-20.0,-40.0,-30.0,0.0,10.0,15.0,15.0,10.0,0.0,-30.0,-30.0,5.0,15.0,20.0,20.0,15.0,5.0,-30.0,-30.0,0.0,15.0,20.0,20.0,15.0,0.0,-30.0,-30.0,5.0,10.0,15.0,15.0,10.0,5.0,-30.0,-40.0,-20.0,0.0,5.0,5.0,0.0,-20.0,-40.0,-50.0,-40.0,-20.0,-30.0,-30.0,-20.0,-40.0,-50.0];
const BISHOP_TABLE: [f32; 64] = [-20.0,-10.0,-10.0,-10.0,-10.0,-10.0,-10.0,-20.0,-10.0,0.0,0.0,0.0,0.0,0.0,0.0,-10.0,-10.0,0.0,5.0,10.0,10.0,5.0,0.0,-10.0,-10.0,5.0,5.0,10.0,10.0,5.0,5.0,-10.0,-10.0,0.0,10.0,10.0,10.0,10.0,0.0,-10.0,-10.0,10.0,10.0,10.0,10.0,10.0,10.0,-10.0,-10.0,5.0,0.0,0.0,0.0,0.0,5.0,-10.0,-20.0,-10.0,-40.0,-10.0,-10.0,-40.0,-10.0,-20.0];
const ROOK_TABLE: [f32; 64] = [10.0,10.0,-10.0,10.0,10.0,-10.0,10.0,10.0,10.0,10.0,-10.0,10.0,10.0,-10.0,10.0,10.0,10.0,10.0,-10.0,10.0,10.0,-10.0,10.0,10.0,10.0,10.0,-10.0,10.0,10.0,-10.0,10.0,10.0,10.0,10.0,-10.0,10.0,10.0,-10.0,10.0,10.0,10.0,10.0,-10.0,10.0,10.0,-10.0,10.0,10.0,10.0,10.0,-10.0,10.0,10.0,-10.0,10.0,10.0,20.0,10.0,-10.0,50.0,10.0,50.0,10.0,20.0];
const KING_TABLE: [f32; 64] = [-30.0,-40.0,-40.0,-50.0,-50.0,-40.0,-40.0,-30.0,-30.0,-40.0,-40.0,-50.0,-50.0,-40.0,-40.0,-30.0,-30.0,-40.0,-40.0,-50.0,-50.0,-40.0,-40.0,-30.0,-30.0,-40.0,-40.0,-50.0,-50.0,-40.0,-40.0,-30.0,-20.0,-30.0,-30.0,-40.0,-40.0,-30.0,-30.0,-20.0,-10.0,-20.0,-20.0,-20.0,-20.0,-20.0,-20.0,-10.0,20.0,20.0,0.0,0.0,0.0,0.0,20.0,20.0,20.0,30.0,10.0,0.0,0.0,10.0,30.0,20.0];
const QUEEN_TABLE: [f32; 64] = [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,10.0,0.0,0.0,0.0,0.0];

fn single_piece_value(board: Board, color: Color, piece: Piece, table: &'static [f32; 64]) -> f32 {
    let pieces = board.pieces(piece) & board.color_combined(color);
    let pieces = if color == Color::Black {pieces.reverse_colors()} else {pieces};

    pieces.map(|square: Square| table[square.to_index()]).sum()
}

fn color_value(board: Board, color: Color) -> f32 {
    single_piece_value(board, color, Piece::Pawn, &PAWN_TABLE) +
        single_piece_value(board, color, Piece::Knight, &KNIGHTS_TABLE) +
        single_piece_value(board, color, Piece::Bishop, &BISHOP_TABLE) +
        single_piece_value(board, color, Piece::Rook, &ROOK_TABLE) +
        single_piece_value(board, color, Piece::Queen, &QUEEN_TABLE) +
        single_piece_value(board, color, Piece::King, &KING_TABLE)
}

pub fn piece_tables(board: Board) -> f32 {
    color_value(board, board.side_to_move()) - color_value(board, !board.side_to_move())
}
